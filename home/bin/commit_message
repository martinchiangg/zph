#!/usr/bin/env ruby

require 'open-uri'

DIVIDERS = %r{[-|_|/|\/]}

def run_specs
  require 'minitest/autorun'
  require 'minitest/pride'
  require 'stringio'

  describe "#main" do

    # it 'compiles default message when no valid branch' do
    #   io = StringIO.new
    #   main("master", io)
    #   expected = "[ZH][] "
    #   io.string.must_equal expected
    # end

    it 'compiles message when valid' do
      io = StringIO.new
      main("zh_9234923_message", io)
      expected = <<-MSG
  [ZH][9234923] message

  Pivotal Story: https://www.pivotaltracker.com/story/show/9234923

      MSG
      io.string.must_equal expected
    end
  end
end

def match_pattern(bn)
  bn.match(/(?<initials>.+)#{DIVIDERS}(?<number>\d{4,})#{DIVIDERS}(?<description>.*)/)
  # if parts.nil? # ie we're not able to match
  #   parts = {initials: DOTFILE_INITIALS, number: '000000', description: ''}
  # end
end

def branch_name_from_git
  `git rev-parse --abbrev-ref HEAD`.chomp
end

def main(branch_name, io = STDOUT)
  # branch_name = 'dev'

  dotfile_initials = open(File.expand_path('~/.initials')).readlines.map(&:chomp).join('/')
  story = `git current-story`.chomp
  story = story.empty? ? "0000000" : story
  default_message = "[#{dotfile_initials}][#{story}] "

  parts = match_pattern(branch_name)

  begin
    initials = parts[:initials].split(DIVIDERS).join("/").upcase
    pivotal_number = parts[:number]
    description = parts[:description].gsub(/#{DIVIDERS}/, ' ')
  rescue
    io.print default_message
    exit(0)
  end

  commit_message = <<-MSG
[#{initials}][#{pivotal_number}] #{description}

Pivotal Story: https://www.pivotaltracker.com/story/show/#{pivotal_number}

  MSG

  io << commit_message
end

if ARGV.first == "test"
  module Kernel
    def exit(*args)
    end
  end
  run_specs
else
  main(branch_name_from_git)
end
