#!/usr/bin/env ruby
#
# ruby recreation of `bin/e`

require 'optparse'
require 'optparse/time'
require 'ostruct'
require 'pp'

class E
  attr_accessor :options, :input
  def initialize(args)
    @options = parse(args)
    @input = String( args[0] )
  end

  def has_linenumber?
    !!input[/:\d+/]
  end

  def vim_command_for_linenumber
    [filename_without_linenumber, "+#{ linenumber }"].join(' ')
  end

  def has_fasd?
    system "which fasd > /dev/null"
  end

  def has_fasd_result?
    fasd_result = `fasd #{input}`.chomp
    !fasd_result.empty?
  end

  def has_ffind?
    system "which ffind > /dev/null"
  end

  def execute
    case
    when input.empty?
      exec "$EDITOR ."
    when File.exists?(input), Dir.exists?(input)
      # warn input
      # warn "file exists"
      exec "$EDITOR #{input}"
    when has_linenumber?
      # warn "has linenumber"
      exec "$EDITOR #{vim_command_for_linenumber}"
    when has_fasd? && options.interactive
      # warn "fasd interactive"
      fasd_filename = `fasd -sia #{input}`.chomp
      exec "$EDITOR #{fasd_filename}"
    when has_fasd? && has_fasd_result?
      # warn "has_fasd plain"
      exec "fasd -a -e $EDITOR #{input}"
    when has_ffind?
      # warn "ffinding"
      files = `ffind #{input}`.chomp.split("\n")
      # pp files
      puts "Editing: #{files.first}"
      exec "$EDITOR #{files.first}"
    else
      error_message
    end
  end

  def filename_without_linenumber
    input.split(':', 2).first
  end

  def linenumber
    @input.split(':', 2)[1]
  end

  def parse(args)
    # The options specified on the command line will be collected in *options*.
    # We set default values here.
    options = OpenStruct.new
    options.interactive = nil

    opts = OptionParser.new do |opts|
      opts.banner = "Usage: e [options]"

      opts.separator ""
      opts.separator "Specific options:"

      # Mandatory argument.
      opts.on("-i", "--interactive [true/false]", "Interactive!") do |lib|
        options.interactive = lib.downcase.to_sym
      end

    end

    opts.parse!(args)
    options
  end

  def error_message
    msg = "Can't find path with normal or extraordinary methods"
    warn msg
    warn "Exiting..."
    exit(1)
  end
end

E.new(ARGV).execute
